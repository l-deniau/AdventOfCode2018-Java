/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import java.io.File;
import java.io.FileNotFoundException;
import java.util.*;

public class Day3 {

    public static void main(String[] args) {
        File input = new File(Objects.requireNonNull(Day3.class.getClassLoader()
                .getResource("input.txt")).getFile());

        System.out.println("--- Day 3: No Matter How You Slice It ---");

        System.out.println();

        System.out.println("Part One - Number of overlap :");
        System.out.println(getNumberOfOverlaps(input));

        System.out.println();

        System.out.println("Part Two - ID of the no-overlap square :");
        System.out.println(getIdOfTheNoOverlapSquare(input));
    }

    private static int getNumberOfOverlaps(File input) {

        List<Square> squareList = new ArrayList<>();
        Set<String> positionsSet = new HashSet<>();

        try (Scanner scanner = new Scanner(input)) {
          while (scanner.hasNextLine()) {
              Square square = getSquare(scanner.nextLine());
              if (!squareList.isEmpty()) {
                  squareList.forEach(comparedSquare ->
                          positionsSet.addAll(getOverlapPositions(square,comparedSquare)));
              }
              squareList.add(square);
          }

        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }

        return positionsSet.size();
    }

    private static int getIdOfTheNoOverlapSquare(File input) {
        List<Square> squareList = new ArrayList<>();
        int result = 0;

        try (Scanner scanner = new Scanner(input)) {
            while (scanner.hasNextLine()) {
                Square square = getSquare(scanner.nextLine());
                squareList.add(square);
            }
            for (Square square1 : squareList) {
                boolean flag = true;
                for (Square square2 : squareList) {
                    if (square1.getID() != square2.getID()) {
                        if (!getOverlapPositions(square1, square2).isEmpty()) {
                            flag = false;
                            break;
                        }
                    }
                }
                if (flag) {
                    result = square1.getID();
                    break;
                }
            };

        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }

        return result;
    }

    private static Collection<? extends String> getOverlapPositions(Square square1, Square square2) {
        Set<String> positionsSet = new HashSet<>();

        // Check if there is overlap
        if (square1.getX() < square2.getX2() && square1.getX2() > square2.getX() &&
            square1.getY() < square2.getY2() && square1.getY2() > square2.getY()) {

            // The overlap square
            Square overlapSquare = new Square();

            // Calculate positions of the overlap square
            overlapSquare.setX(square1.getX() < square2.getX() ? square2.getX() : square1.getX());
            overlapSquare.setY(square1.getY() < square2.getY() ? square2.getY() : square1.getY());
            overlapSquare.setWidth(square1.getX2() > square2.getX2() ?
                    square2.getX2() - overlapSquare.getX() : square1.getX2() - overlapSquare.getX());
            overlapSquare.setHeight(square1.getY2() > square2.getY2() ?
                    square2.getY2() - overlapSquare.getY() : square1.getY2() - overlapSquare.getY());

            // Add positions into the Set
            for (int x = overlapSquare.getX(); x < overlapSquare.getX2(); x++) {
                for (int y = overlapSquare.getY(); y < overlapSquare.getY2(); y++) {
                    positionsSet.add(x + "," + y);
                }
            }
        }

        return positionsSet;
    }

    private static Square getSquare(String nextLine) {
        int ID = Integer.parseInt(nextLine.split(" ")[0].substring(1));
        int x = Integer.parseInt(nextLine.split(" ")[2].split(",")[0]);
        int y = Integer.parseInt(nextLine.split(" ")[2].split(",")[1].split(":")[0]);
        int width = Integer.parseInt(nextLine.split(" ")[3].split("x")[0]);
        int height = Integer.parseInt(nextLine.split(" ")[3].split("x")[1]);

        return new Square(ID, x, y, width, height);
    }
}
